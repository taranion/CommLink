name: Compile Linux Self
on: [push]
#on:
#  push:
#    # Sequence of patterns matched against refs/tags
#    tags:
#    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  LANG: "en_EN.UTF-8"

jobs:
  compile-linux-native:
    runs-on: [self-hosted, Linux]
    steps:
    - name: checkout sources
      uses: actions/checkout@v4

    - name: setup-graalvm-ce
      uses: gluonhq/setup-graalvm@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
         # GraalVM version. Default: latest
         graalvm: 'latest'
         # Java version. Since GraalVM 22, either java11, java17 or java23. Before GraalVM 22, empty. Default: java23
         jdk: 'java23'
         # Architecture flag. Available options are 'x86_64' (default) and 'aarch64'. The latter is available for M1 runners starting GraalVM 22.1.
         arch: 'x86_64'

    - name: Set Release version env variable
      run: |
        echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

    - name: Compile
      run:  export LC_ALL=de_DE.UTF-8; export LC_MESSAGES=de_DE.UTF-8; locale ; mvn -U -s settings.xml clean gluonfx:compile -Pdesktop-binary
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        LANG: en_EN
        CC: gcc-11
        CXX: g++-11
      
#    - name: Install missing packages
#      run: sudo apt-get install libgtk-3-dev libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev  libpango1.0-dev libxtst-dev

    - name: Link
      run:  mvn gluonfx:link -Pdesktop-binary
        
    - name: Show result
      run: ls -l target/gluonfx/x86_64-linux

    - name: Create Native Installer
      run:  mvn gluonfx:package -Pdesktop

#    - name: Logs
#      if: always()      
#      run: cat target/gluonfx/x86_64-linux/gvm/log/client-debug0.log
        
    - name: Show result
      run: ls -l target/ 
        
    - name: Prepare staging
      run: |
        mkdir -p staging ; 
        cp target/gluonfx/x86_64-linux/CommLink6 staging/commlink6-${{ env.RELEASE_VERSION }} ;
        chmod 755 staging/*  ;
        ls staging
      
    - name: Upload
      continue-on-error: true
      uses: appleboy/scp-action@master
      with:
        source: staging/commlink6-${{ env.RELEASE_VERSION }}
        target: /var/www/html/commlink6-builds/linux/CommLink6-${{env.RELEASE_VERSION}}
        host: eden.rpgframework.de
        username: ghcommlink
        password: ${{ secrets.DEPLOY_PASSWORD }}
        

  compile-linux-jre:
    runs-on: ubuntu-latest
    steps:
    - name: checkout sources
      uses: actions/checkout@master

    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '20'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set Release version env variable
      run: |
        echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
        
    - name: Compile update artifact
      run: mvn -s settings.xml package -Pinterpreted
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: JPackage
      run:  mvn -s settings.xml -B jpackage:jpackage@linux -Pinterpreted
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Show result
      run: ls -l target/jpackage
      
    - name: Upload JRE DEB
      continue-on-error: true
      uses: appleboy/scp-action@master
      with:
        source: "target/jpackage/commlink6_${{ env.RELEASE_VERSION }}_amd64.deb"
        target: /var/www/html/commlink6-builds/linux/
        host: eden.rpgframework.de
        username: dummy
        password: ${{ secrets.DEPLOY_PASSWORD }}
          
    - name: Upload JRE RPM
      continue-on-error: true
      uses: appleboy/scp-action@master
      with:
        source: "target/jpackage/commlink6-${{ env.RELEASE_VERSION }}-1.x86_64.rpm"
        target: /var/www/html/commlink6-builds/linux/
        host: eden.rpgframework.de
        username: dummy
        password: ${{ secrets.DEPLOY_PASSWORD }}
    